// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.apache.airavata.replicacatalog.catalog.stubs";

message UserInfo {
  /*
   * This is an external identifier for the user, which identifies the user in
   * whatever user management scheme data catalog is integrated with.
   */
  string user_id = 1;
  /*
   * This is an (optional) external identifier for the tenant, which
   * identifies the tenant in whatever tenant management scheme data catalog
   * is integrated with.
   */
  string tenant_id = 2;
}

message GroupInfo {
  /*
   * This is an external identifier for the group, which identifies the group in
   * whatever group management scheme data catalog is integrated with.
   */
  string group_id = 1;
  /*
   * This is an (optional) external identifier for the tenant, which
   * identifies the tenant in whatever tenant management scheme data catalog
   * is integrated with.
   */
  string tenant_id = 2;
}

enum Permission {
  OWNER = 0;
  READ = 1;
  READ_METADATA = 2;
  WRITE = 3;
  WRITE_METADATA = 4;
  MANAGE_SHARING = 5;
}

enum ReplicaLocationCategory  {
  GATEWAY_DATA_STORE = 0;
  COMPUTE_RESOURCE = 1;
  LONG_TERM_STORAGE_RESOURCE = 2;
  OTHER = 3;
}

enum StorageType {
  LOCAL = 0;
  S3 = 1;
  GCS = 2;
  AZURE = 3;

}


message DataReplicaLocation {
  string data_replica_id = 1;
  string parent_data_product_id = 2;
  string storage_resource_id = 3;
  string replica_name = 4;
  string replica_description = 5;
  int64 creation_time = 6;
  int64 last_modified_time = 7;
  int64 valid_until_time = 8;
  ReplicaLocationCategory category = 9;
  StorageType storage_type = 10;
  map<string, string> metadata = 11;
}

message DataReplicaCreateRequest {
  DataReplicaLocation data_replica = 1;
}
message DataReplicaCreateResponse{
  DataReplicaLocation data_replica = 1;
}

message DataReplicaUpdateRequest {
  DataReplicaLocation data_replica = 1;
}
message DataReplicaUpdateResponse{
  DataReplicaLocation data_replica = 1;
}
message DataReplicaGetRequest {
  string data_replica_id = 1;
}
message DataReplicaGetResponse {
  DataReplicaLocation data_replica = 1;
}
message DataReplicaDeleteRequest {
  string data_replica_id = 1;
}
message DataReplicaDeleteResponse {
}

message AllDataReplicaGetRequest {
  string parent_data_product_id = 1;
  int32 page_number = 2;
  int32 page_size = 3;
}

message AllDataReplicaGetResponse {
  repeated ReplicaListEntry storage_list = 1;
}

message ReplicaListEntry {
  string data_replica_id = 1;
  string replica_name = 2;
  StorageType storage_type = 3;
}

message AllDataReplicaDeleteRequest {
  string parent_data_product_id = 1;
}

message AllDataReplicaDeleteResponse{
  int32 replica_location_count = 1;
}

