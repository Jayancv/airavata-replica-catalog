/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.apache.airavata.replicacatalog.resource.stubs.common;

import "resource/s3/S3Storage.proto";


enum StorageType {
    S3 = 0;
    SCP = 1;
    FTP = 2;
    LOCAL = 3;
    BOX = 4;
    DROPBOX = 5;
    GCS = 6;
    AZURE = 7;
    SWIFT = 8;
    ODATA = 9;
}

enum Error {
    NOT_FOUND = 0;
    NO_PERMISSION = 1;
    LIMIT_OVERFLOWED = 2;
}

message StorageTypeResolveRequest {
    string storage_id = 1;
}

message StorageTypeResolveResponse {
    string storage_id = 1;
    string storage_name = 2;
    StorageType storage_type = 3;
    Error error = 4;
}

message SecretForStorage {
    string storage_id = 1;
    string secret_id = 2;
    string replica_id = 3;
    StorageType storage_type = 4;
    Error error = 5;
}

message SecretForStorageGetRequest {
    string storage_id = 1;
}

message SecretForStorageDeleteRequest {
    string storage_id = 1;
}

message SecretForStorageDeleteResponse {
    bool status = 1;
}

message StorageListEntry {
    string storage_id = 1;
    string storage_name = 2;
    string replica_id = 3;
    StorageType storage_type = 4;
}

message StorageListResponse {
    repeated StorageListEntry storage_list = 1;
}

message StorageListRequest {
    int32 page_number = 1;
    int32 page_size = 2;
}

message StorageSearchRequest {
    oneof searchQuery {
        string storage_id = 1;
        string storage_name = 2;
        StorageType storage_type = 3;
    }
}


message FileResource {
    string resourcePath = 1;
}

message DirectoryResource {
    string resourcePath = 1;
}

message GenericResource {

    string resourceId = 1;

    oneof resource {
        org.apache.airavata.replicacatalog.resource.stubs.common.FileResource file = 2;
        org.apache.airavata.replicacatalog.resource.stubs.common.DirectoryResource directory = 3;
    }

    StorageWrapper storage =4;

}

message StorageWrapper {
    oneof storage {
        org.apache.airavata.replicacatalog.resource.stubs.s3.S3Storage s3Storage = 1;
    }
}

message GenericResourceGetRequest {
    string resourceId = 1;
}

message GenericResourceCreateRequest {
    string storageId = 1;
    GenericResource resource = 2;
    StorageType storageType = 3;
}

message GenericResourceUpdateRequest {
    string resourceId = 1;
    string storageId = 2;
    oneof resource {
        org.apache.airavata.replicacatalog.resource.stubs.common.FileResource file = 3;
        org.apache.airavata.replicacatalog.resource.stubs.common.DirectoryResource directory = 4;
    }
}

message GenericResourceUpdateResponse {
    string resourceId = 1;
}

message GenericResourceDeleteRequest {
    string resourceId = 1;
}

message GenericResourceDeleteResponse {
    bool status = 1;
}

/*
 * Replica storage entry related services
 */
service StorageCommonService {
    rpc resolveStorageType (StorageTypeResolveRequest) returns (StorageTypeResolveResponse);

    rpc registerSecretForStorage(SecretForStorage) returns (SecretForStorage);

    rpc getSecretForStorage(SecretForStorageGetRequest) returns (SecretForStorage);

    rpc deleteSecretsForStorage(SecretForStorageDeleteRequest) returns (SecretForStorageDeleteResponse);

    rpc searchStorages(StorageSearchRequest) returns (StorageListResponse);

    rpc listStorages(StorageListRequest) returns (StorageListResponse);

/*****************************/
    rpc getGenericResource (GenericResourceGetRequest) returns
        (org.apache.airavata.replicacatalog.resource.stubs.common.GenericResource);

    rpc createGenericResource (GenericResourceCreateRequest) returns
        (org.apache.airavata.replicacatalog.resource.stubs.common.GenericResource);

    rpc updateGenericResource (GenericResourceUpdateRequest) returns (GenericResourceUpdateResponse);

    rpc deleteGenericResource (GenericResourceDeleteRequest) returns (GenericResourceDeleteResponse);
}